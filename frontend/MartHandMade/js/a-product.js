document.addEventListener("DOMContentLoaded", function () {
  loadProducts();
});

// üü¢ L·∫•y danh s√°ch s·∫£n ph·∫©m
function loadProducts() {
  fetch("http://localhost:5258/api/SanPham/LayDanhSach", {
    method: "GET",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("token")}`,
      "Content-Type": "application/json",
    },
  })
    .then((response) => response.json())
    .then((data) => {
      if (data?.data?.$values) {
        renderProductsTable(data.data.$values);
      }
    })
    .catch((error) => {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m:", error);
    });
}

// üü¢ Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
function renderProductsTable(products) {
  const tableBody = document.querySelector("#product-table tbody");
  tableBody.innerHTML = "";

  products.forEach((product) => {
    const tr = document.createElement("tr");
    tr.setAttribute("data-id", product.maSanPham);
    console.log(
      "Tr·∫°ng th√°i:",
      product.trangThai,
      "‚û°Ô∏è Class:",
      getStatusClass(product.trangThai)
    );

    tr.innerHTML = `
        <td>${product.tenSanPham}</td>
        <td>${product.moTa || "Kh√¥ng c√≥ m√¥ t·∫£"}</td> 
        <td>${product.giaBan.toLocaleString()} ƒë</td>
        <td>${product.soLuongTon}</td>
        <td>${product.soLuongBan}</td>
        <td><img src="${
          product.anhSanPham
        }" alt="·∫¢nh" style="width: 50px; height: 50px;"></td>
        <td><span class="status-badge ${getStatusClass(product.trangThai)}">${
      product.trangThai
    }</span></td>
        <td>${formatDate(product.ngayTao) || "N/A"}</td>
        <td>${product.tenDanhMuc || "Kh√¥ng c√≥"}</td>
        <td><button class="edit-btn" data-id="${
          product.maSanPham
        }">S·ª≠a</button></td>
      `;

    tableBody.appendChild(tr);
  });

  document.querySelectorAll(".edit-btn").forEach((button) => {
    button.addEventListener("click", function () {
      openEditProductRow(this.getAttribute("data-id"));
    });
  });
}
// ƒê·ªãnh d·∫°ng ng√†y th√°ng + gi·ªù ph√∫t gi√¢y
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleString("vi-VN", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    hour12: false, // Hi·ªÉn th·ªã gi·ªù 24h thay v√¨ AM/PM
  });
}
// üü¢ Ch·ªânh s·ª≠a s·∫£n ph·∫©m ngay tr√™n b·∫£ng
function openEditProductRow(productId) {
  const row = document.querySelector(`tr[data-id="${productId}"]`);
  if (!row) return;

  const cells = row.children;
  const oldValues = {
    name: cells[0].textContent,
    description: cells[1].textContent.trim(),
    price: cells[2].textContent.replace(" ƒë", "").replace(/,/g, ""),
    stock: cells[3].textContent,
    sold: cells[4].textContent,
    image: cells[5].querySelector("img").src,
    status: cells[6].textContent.trim(),
    date: cells[7].textContent.trim(),
    category: cells[8].textContent.trim(),
  };

  // Bi·∫øn th√†nh input ƒë·ªÉ ch·ªânh s·ª≠a
  cells[0].innerHTML = `<input type="text" value="${oldValues.name}" class="edit-input">`;
  cells[1].innerHTML = `<textarea class="edit-input">${oldValues.description}</textarea>`;
  cells[2].innerHTML = `<input type="text" value="${oldValues.price}" class="edit-input">`;
  cells[3].innerHTML = `<input type="number" value="${oldValues.stock}" class="edit-input">`;
  cells[5].innerHTML = `<input type="text" value="${oldValues.image}" class="edit-input">`;
  cells[6].innerHTML = `
      <select class="edit-input">
        <option value="C√≤n h√†ng" ${
          oldValues.status === "C√≤n h√†ng" ? "selected" : ""
        }>C√≤n h√†ng</option>
        <option value="H·∫øt h√†ng" ${
          oldValues.status === "H·∫øt h√†ng" ? "selected" : ""
        }>H·∫øt h√†ng</option>
        <option value="D·ª´ng b√°n" ${
          oldValues.status === "D·ª´ng b√°n" ? "selected" : ""
        }>D·ª´ng b√°n</option>
      </select>
    `;
  cells[8].innerHTML = `<input type="text" value="${oldValues.category}" class="edit-input">`;

  // N√∫t l∆∞u & h·ªßy
  cells[9].innerHTML = `
      <button class="save-edit" data-id="${productId}">L∆∞u</button>
      <button class="cancel-edit">H·ªßy</button>
    `;

  row.querySelector(".save-edit").addEventListener("click", function () {
    updateProduct(
      productId,
      row.querySelector("td:nth-child(1) input").value.trim(),
      row.querySelector("td:nth-child(2) textarea").value.trim(),
      row.querySelector("td:nth-child(3) input").value.trim(),
      parseInt(row.querySelector("td:nth-child(4) input").value),
      row.querySelector("td:nth-child(6) input").value.trim(),
      row.querySelector("td:nth-child(7) select").value,
      row.querySelector("td:nth-child(9) input").value.trim()
    );
  });

  row.querySelector(".cancel-edit").addEventListener("click", function () {
    loadProducts();
  });
}

function updateProduct(
  productId,
  newName,
  newDescription,
  newPrice,
  newStock,
  newImage,
  newStatus,
  newCategoryName
) {
  if (!newCategoryName) {
    alert("Danh m·ª•c kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const formData = new FormData();
  formData.append("TenSanPham", newName);
  formData.append("MoTa", newDescription);
  formData.append("GiaBan", newPrice);
  formData.append("SoLuongTon", newStock);
  formData.append("AnhSanPham", newImage);
  formData.append("TrangThai", newStatus);
  formData.append("TenDanhMuc", newCategoryName);

  fetch(`http://localhost:5258/api/SanPham/CapNhat/${productId}`, {
    method: "PUT",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("authToken")}`,
    },
    body: formData,
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error(`L·ªói API: ${response.status} - ${response.statusText}`);
      }
      return response.text(); // Kh√¥ng d√πng response.json() v√¨ API FromForm c√≥ th·ªÉ tr·∫£ v·ªÅ text
    })
    .then(() => {
      alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
      loadProducts();
    })
    .catch((error) => {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m.");
    });
}

function getStatusClass(status) {
  if (!status) return "inactive"; // N·∫øu kh√¥ng c√≥ tr·∫°ng th√°i, m·∫∑c ƒë·ªãnh l√† inactive

  const normalizedStatus = status.trim().toLowerCase(); // X√≥a kho·∫£ng tr·∫Øng + chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng

  switch (normalizedStatus) {
    case "c√≤n h√†ng":
      return "active"; // Xanh l√°
    case "h·∫øt h√†ng":
      return "warning"; // V√†ng
    case "d·ª´ng b√°n":
      return "stopped"; // ƒê·ªè
    default:
      return "inactive"; // X√°m
  }
}

// üè∑Ô∏è ƒê·ªãnh d·∫°ng tr·∫°ng th√°i s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã
function formatProductStatus(status) {
  switch (status) {
    case "C√≤n h√†ng":
      return "C√≤n h√†ng";
    case "H·∫øt h√†ng":
      return "H·∫øt h√†ng";
    case "D·ª´ng b√°n":
      return "D·ª´ng b√°n";
    default:
      return status;
  }
}

////////////////////////////////////////////////////////////////////////////////

document.addEventListener("DOMContentLoaded", function () {
  const addProductBtn = document.getElementById("add-product-btn");

  if (!addProductBtn) {
    console.error("Kh√¥ng t√¨m th·∫•y n√∫t 'Th√™m s·∫£n ph·∫©m'. Ki·ªÉm tra l·∫°i HTML!");
    return;
  }

  addProductBtn.addEventListener("click", function () {
    console.log("N√∫t 'Th√™m s·∫£n ph·∫©m' ƒë∆∞·ª£c nh·∫•n!");
    openAddProductModal();
  });
});

// üü¢ X·ª≠ l√Ω khi nh·∫•n n√∫t "L∆∞u"
function addProduct() {
  const productName = document.getElementById("product-name").value.trim();
  const description = document
    .getElementById("product-description")
    .value.trim();
  const price = parseFloat(document.getElementById("product-price").value);
  const stock = parseInt(document.getElementById("product-stock").value);
  const soldQuantity = parseInt(document.getElementById("product-sold").value);
  const imageUrl = document.getElementById("product-image").value.trim(); // üîπ Nh·∫≠p link ·∫£nh
  const status = document.getElementById("product-status").value; // üîπ L·∫•y tr·∫°ng th√°i
  const categoryName = document.getElementById("product-category").value.trim();

  if (!productName || !categoryName) {
    showNotification(
      "error",
      "T√™n s·∫£n ph·∫©m v√† t√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
    );
    return;
  }

  if (!description) {
    showNotification("error", "M√¥ t·∫£ s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
    return;
  }

  if (isNaN(price) || price < 0) {
    showNotification("error", "Gi√° b√°n ph·∫£i l√† s·ªë h·ª£p l·ªá!");
    return;
  }

  if (isNaN(stock) || stock < 0) {
    showNotification("error", "S·ªë l∆∞·ª£ng t·ªìn ph·∫£i l√† s·ªë h·ª£p l·ªá!");
    return;
  }

  if (isNaN(soldQuantity) || soldQuantity < 0) {
    showNotification("error", "S·ªë l∆∞·ª£ng b√°n ph·∫£i l√† s·ªë h·ª£p l·ªá!");
    return;
  }

  if (!imageUrl.startsWith("http")) {
    showNotification("error", "·∫¢nh s·∫£n ph·∫©m ph·∫£i l√† ƒë∆∞·ªùng link h·ª£p l·ªá!");
    return;
  }

  // üîπ D√πng FormData ƒë·ªÉ g·ª≠i d·ªØ li·ªáu ph√π h·ª£p v·ªõi [FromForm]
  const formData = new FormData();
  formData.append("TenSanPham", productName);
  formData.append("MoTa", description);
  formData.append("GiaBan", price);
  formData.append("SoLuongTon", stock);
  formData.append("SoLuongBan", soldQuantity);
  formData.append("TrangThai", status); // üîπ G·ª≠i tr·∫°ng th√°i
  formData.append("TenDanhMuc", categoryName);
  formData.append("AnhSanPham", imageUrl); // üîπ G·ª≠i link ·∫£nh

  fetch("http://localhost:5258/api/sanpham/ThemSanPham", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("authToken")}`, // N·∫øu API y√™u c·∫ßu x√°c th·ª±c
    },
    body: formData,
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error("Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m");
      }
      return response.json();
    })
    .then((data) => {
      showNotification("success", "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
      closeProductModal();
      loadProducts();
    })
    .catch((error) => {
      console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
      showNotification("error", "L·ªói khi th√™m s·∫£n ph·∫©m!");
    });
}

// üü¢ M·ªü modal th√™m s·∫£n ph·∫©m
function openAddProductModal() {
  console.log("M·ªü modal th√™m s·∫£n ph·∫©m!");

  let oldModal = document.getElementById("product-modal");
  if (oldModal) oldModal.remove();

  const modal = document.createElement("div");
  modal.id = "product-modal";
  modal.classList.add("modal-overlay");
  modal.innerHTML = `
      <div class="modal-content">
        <h2>Th√™m s·∫£n ph·∫©m m·ªõi</h2>
        
        <label for="product-name">T√™n s·∫£n ph·∫©m:</label>
        <input type="text" id="product-name" placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m" />
        
        <label for="product-description">M√¥ t·∫£ s·∫£n ph·∫©m:</label>
        <textarea id="product-description" placeholder="Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m"></textarea>
        
        <label for="product-price">Gi√° b√°n:</label>
        <input type="number" id="product-price" placeholder="Nh·∫≠p gi√° b√°n" />
        
        <label for="product-stock">S·ªë l∆∞·ª£ng t·ªìn:</label>
        <input type="number" id="product-stock" placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng t·ªìn" />
        
        <label for="product-sold">S·ªë l∆∞·ª£ng b√°n:</label>
        <input type="number" id="product-sold" placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng b√°n" />
        
        <label for="product-category">T√™n danh m·ª•c:</label>
        <input type="text" id="product-category" placeholder="Nh·∫≠p t√™n danh m·ª•c" />
        
        <label for="product-image">Link ·∫£nh s·∫£n ph·∫©m:</label>
        <input type="text" id="product-image" placeholder="Nh·∫≠p URL ·∫£nh s·∫£n ph·∫©m" />
        
        <label for="product-status">Tr·∫°ng th√°i:</label>
        <select id="product-status">
          <option value="C√≤n h√†ng">C√≤n h√†ng</option>
          <option value="H·∫øt h√†ng">H·∫øt h√†ng</option>
          <option value="D·ª´ng b√°n">D·ª´ng b√°n</option>
        </select>
        
        <div class="modal-actions">
          <button id="save-product-btn" class="action-btn">L∆∞u</button>
          <button id="close-modal-btn" class="cancel-btn">H·ªßy</button>
        </div>
      </div>
    `;

  document.body.appendChild(modal);

  document
    .getElementById("save-product-btn")
    .addEventListener("click", addProduct);
  document
    .getElementById("close-modal-btn")
    .addEventListener("click", closeProductModal);
}

// üü¢ ƒê√≥ng modal
function closeProductModal() {
  console.log("ƒê√≥ng modal!");
  const modal = document.getElementById("product-modal");
  if (modal) modal.remove();
}
