//////////////////////////////////////
document.addEventListener("DOMContentLoaded", function () {
  loadStaffMembers();
});

// üü¢ L·∫•y danh s√°ch nh√¢n vi√™n t·ª´ API
function loadStaffMembers() {
  fetch("http://localhost:5258/api/NhanVien/LayNhanVien", {
    method: "GET",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("authToken")}`,
      "Content-Type": "application/json",
    },
  })
    .then((response) => {
      if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n");
      return response.json();
    })
    .then((data) => {
      if (data?.data?.$values) {
        renderStaffTable(data.data.$values);
      }
    })
    .catch((error) => {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n:", error);
      alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n.");
    });
}

// üü¢ Hi·ªÉn th·ªã danh s√°ch nh√¢n vi√™n
function renderStaffTable(staffMembers) {
  const tableBody = document.querySelector("#staff-table tbody");
  tableBody.innerHTML = "";

  staffMembers.forEach((staff, index) => {
    const tr = document.createElement("tr");
    tr.setAttribute("data-id", staff.maNhanVien);

    tr.innerHTML = `
        <td>${index + 1}</td>
        <td>${staff.hoTenNhanVien}</td>
        <td>${staff.soDienThoaiNhanVien}</td>
        <td>${staff.emailNhanVien}</td>
        <td>${staff.diaChiNhanVien}</td>
        <td>
          <button class="edit-btn" data-id="${staff.maNhanVien}">S·ª≠a</button>
        </td>
      `;

    tableBody.appendChild(tr);
  });

  // Th√™m s·ª± ki·ªán click cho n√∫t "S·ª≠a"
  document.querySelectorAll(".edit-btn").forEach((button) => {
    button.addEventListener("click", function () {
      openEditStaffRow(this.getAttribute("data-id"));
    });
  });
}

// üü¢ Ch·ªânh s·ª≠a th√¥ng tin nh√¢n vi√™n ngay tr√™n b·∫£ng
function openEditStaffRow(staffId) {
  const row = document.querySelector(`tr[data-id="${staffId}"]`);
  if (!row) return;

  const cells = row.children;
  const oldValues = {
    name: cells[1].textContent,
    phone: cells[2].textContent,
    email: cells[3].textContent,
    address: cells[4].textContent,
  };

  // Chuy·ªÉn th√†nh √¥ nh·∫≠p
  cells[1].innerHTML = `<input type="text" value="${oldValues.name}" class="edit-input">`;
  cells[2].innerHTML = `<input type="text" value="${oldValues.phone}" class="edit-input">`;
  cells[3].innerHTML = `<input type="email" value="${oldValues.email}" class="edit-input">`;
  cells[4].innerHTML = `<input type="text" value="${oldValues.address}" class="edit-input">`;

  // Thay n√∫t "S·ª≠a" th√†nh "L∆∞u" v√† "H·ªßy"
  cells[5].innerHTML = `
      <button class="save-edit" data-id="${staffId}">L∆∞u</button>
      <button class="cancel-edit">H·ªßy</button>
    `;

  // S·ª± ki·ªán "L∆∞u"
  row.querySelector(".save-edit").addEventListener("click", function () {
    updateStaff(
      staffId,
      row.querySelector("td:nth-child(2) input").value.trim(),
      row.querySelector("td:nth-child(3) input").value.trim(),
      row.querySelector("td:nth-child(4) input").value.trim(),
      row.querySelector("td:nth-child(5) input").value.trim()
    );
  });

  // S·ª± ki·ªán "H·ªßy"
  row.querySelector(".cancel-edit").addEventListener("click", function () {
    loadStaffMembers();
  });
}

// üü¢ G·ªçi API c·∫≠p nh·∫≠t nh√¢n vi√™n
function updateStaff(staffId, newName, newPhone, newEmail, newAddress) {
  if (!newName || !newPhone || !newEmail || !newAddress) {
    alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    return;
  }

  const formData = new FormData();
  formData.append("HoTenNhanVien", newName);
  formData.append("SoDienThoaiNhanVien", newPhone);
  formData.append("EmailNhanVien", newEmail);
  formData.append("DiaChiNhanVien", newAddress);

  fetch(`http://localhost:5258/api/NhanVien/CapNhat/${staffId}`, {
    method: "PUT",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("authToken")}`,
    },
    body: formData,
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error(`L·ªói API: ${response.status} - ${response.statusText}`);
      }
      return response.json();
    })
    .then((data) => {
      alert("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      loadStaffMembers();
    })
    .catch((error) => {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√¢n vi√™n.");
    });
}

// 6.2 Qu·∫£n l√Ω th√¥ng tin kh√°ch h√†ng
document.addEventListener("DOMContentLoaded", function () {
  loadCustomers();
});

// üü¢ L·∫•y danh s√°ch kh√°ch h√†ng t·ª´ API
function loadCustomers() {
  const tableBody = document.querySelector("#customer-info-table tbody");

  if (!tableBody) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng kh√°ch h√†ng.");
    return;
  }

  fetch("http://localhost:5258/api/KhachHang/LayKhachHang", {
    method: "GET",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("authToken")}`,
      "Content-Type": "application/json",
    },
  })
    .then((response) => {
      if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√°ch h√†ng");
      return response.json();
    })
    .then((data) => {
      if (data?.data?.$values) {
        renderCustomersTable(data.data.$values);
      } else {
        console.error("‚ùå D·ªØ li·ªáu API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.");
      }
    })
    .catch((error) => {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch kh√°ch h√†ng:", error);
      alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√°ch h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.");
    });
}

// üü¢ Hi·ªÉn th·ªã danh s√°ch kh√°ch h√†ng
function renderCustomersTable(customers) {
  const tableBody = document.querySelector("#customer-info-table tbody");
  tableBody.innerHTML = "";

  customers.forEach((customer, index) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
        <td>${index + 1}</td>
        <td>${customer.hoTenKhachHang || "N/A"}</td>
        <td>${customer.soDienThoaiKhach || "N/A"}</td>
        <td>${customer.emailKhach || "N/A"}</td>
        <td>${customer.diaChiKhach || "N/A"}</td>
      `;
    tableBody.appendChild(tr);
  });
}

// ============ 7. AUTHENTICATION AND LOGOUT SECTION ============
// ƒêƒÉng xu·∫•t
function logout() {
  // Hi·ªÉn th·ªã x√°c nh·∫≠n
  if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?")) {
    return;
  }

  // X√≥a token v√† c√°c d·ªØ li·ªáu l∆∞u trong localStorage
  localStorage.removeItem("authToken");
  localStorage.removeItem("userRole");

  // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
  window.location.href = "account.html";
}

// ============ UTILITY FUNCTIONS ============
// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(type, message) {
  const notification = document.createElement("div");
  notification.className = `notification ${type}`;
  notification.textContent = message;

  document.body.appendChild(notification);

  // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 3 gi√¢y
  setTimeout(() => {
    notification.classList.add("fade-out");
    setTimeout(() => {
      notification.remove();
    }, 300);
  }, 3000);
}
