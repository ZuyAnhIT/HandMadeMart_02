// üîπ L·∫•y ID s·∫£n ph·∫©m t·ª´ URL
function layIDSanPham() {
  const params = new URLSearchParams(window.location.search);
  return params.get("id");
}

// üîπ G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m (ho·∫∑c d·ªØ li·ªáu m·∫´u n·∫øu API l·ªói)
async function hienThiSanPham() {
  const id = layIDSanPham();
  if (!id) {
    document.querySelector(".product-detail-container").innerHTML =
      "<p>ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!</p>";
    return;
  }

  try {
    const response = await fetch(
      `http://localhost:5258/api/sanpham/LaySanPham/${id}`
    );
    if (!response.ok) throw new Error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!");

    const sanPham = await response.json();
    capNhatGiaoDienSanPham(sanPham);
  } catch (error) {
    console.error("L·ªói khi g·ªçi API:", error);
    const dummyData = createDummyData();
    capNhatGiaoDienSanPham(dummyData);
  }
}

// üîπ C·∫≠p nh·∫≠t giao di·ªán s·∫£n ph·∫©m
function capNhatGiaoDienSanPham(sanPham) {
  document.getElementById("product-name").innerText = sanPham.tenSanPham;
  document.getElementById("product-description").innerText =
    " M√¥ t·∫£ chi ti·∫øt: " + sanPham.moTa;
  document.getElementById("product-price").innerText =
    "Gi√° b√°n: " + sanPham.giaBan.toLocaleString() + " VNƒê";
  document.getElementById("product-image").src = sanPham.anhSanPham;
  document.getElementById("product-status").innerText =
    "Tr·∫°ng th√°i s·∫£n ph·∫©m: " + sanPham.trangThai ? "C√≤n h√†ng" : "H·∫øt h√†ng";
  document.getElementById(
    "product-stock"
  ).innerText = `S·ªë l∆∞·ª£ng c√≤n: ${sanPham.soLuongTon}`;
  document.getElementById("product-category").innerText =
    " Danh m·ª•c: " + sanPham.tenDanhMuc;
}

// üîπ X·ª≠ l√Ω th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng v√† chuy·ªÉn h∆∞·ªõng
function themVaoGioHang(event) {
  event.stopPropagation();

  const id = layIDSanPham();
  if (!id) return;

  const tenSanPham = document.getElementById("product-name").innerText;
  const giaBan = parseInt(
    document.getElementById("product-price").innerText.replace(" VNƒê", ""),
    10
  );

  let gioHang = JSON.parse(localStorage.getItem("gioHang")) || [];

  const sanPhamIndex = gioHang.findIndex((item) => item.maSanPham === id);
  if (sanPhamIndex !== -1) {
    gioHang[sanPhamIndex].soLuong += 1;
  } else {
    gioHang.push({ maSanPham: id, tenSanPham, giaBan, soLuong: 1 });
  }

  localStorage.setItem("gioHang", JSON.stringify(gioHang));
  updateCartCount();

  // Chuy·ªÉn h∆∞·ªõng sang trang gi·ªè h√†ng
  window.location.href = "cart.html";
}

// üîπ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng hi·ªÉn th·ªã
function updateCartCount() {
  const gioHang = JSON.parse(localStorage.getItem("gioHang")) || [];
  const tongSoLuong = gioHang.reduce((tong, sp) => tong + sp.soLuong, 0);

  const cartCountElement = document.querySelector(".cart-count");
  if (cartCountElement) {
    cartCountElement.textContent = tongSoLuong;
  }
}

// üîπ H√†m t·∫°o d·ªØ li·ªáu m·∫´u khi API l·ªói
function createDummyData() {
  return {
    tenSanPham: "S·∫£n ph·∫©m m·∫´u",
    moTa: "ƒê√¢y l√† m√¥ t·∫£ s·∫£n ph·∫©m m·∫´u.",
    giaBan: 100000,
    anhSanPham: "default.jpg",
    trangThai: true,
    soLuongTon: 50,
  };
}

// üîπ Chia s·∫ª s·∫£n ph·∫©m l√™n m·∫°ng x√£ h·ªôi
function chiaSe(lenMang) {
  const url = window.location.href;
  let shareURL = "";

  switch (lenMang) {
    case "facebook":
      shareURL = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
      break;
    case "twitter":
      shareURL = `https://twitter.com/intent/tweet?url=${url}`;
      break;
    case "instagram":
      shareURL = `https://www.instagram.com/", "_blank`;
      break;
  }

  window.open(shareURL, "_blank");
}

// üîπ Ch·∫°y khi trang t·∫£i xong
document.addEventListener("DOMContentLoaded", () => {
  hienThiSanPham();
  updateCartCount();
});

// ƒê√°nh gi√°
document.addEventListener("DOMContentLoaded", function () {
  // L·∫•y th√¥ng tin s·∫£n ph·∫©m hi·ªán t·∫°i t·ª´ URL
  const urlParams = new URLSearchParams(window.location.search);
  const productId = urlParams.get("id"); // Gi·∫£ s·ª≠ ID s·∫£n ph·∫©m ƒë∆∞·ª£c truy·ªÅn qua tham s·ªë URL 'id'

  console.log("ID s·∫£n ph·∫©m t·ª´ URL:", productId); // Log ƒë·ªÉ ki·ªÉm tra

  if (!productId) {
    console.error("ID s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong URL");
    document.querySelector("#reviews-slider").innerHTML =
      '<div class="reviews-error">Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°: Thi·∫øu m√£ s·∫£n ph·∫©m</div>';
    return;
  }

  // G·ªçi API ƒë·ªÉ l·∫•y ƒë√°nh gi√°
  fetchReviews(productId);
});

async function fetchReviews(productId) {
  try {
    console.log("ƒêang g·ªçi API v·ªõi m√£ s·∫£n ph·∫©m:", productId);

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i
    document.querySelector("#reviews-slider").innerHTML =
      '<div class="reviews-loading">ƒêang t·∫£i ƒë√°nh gi√°...</div>';

    // X√¢y d·ª±ng URL API
    const apiUrl = `http://localhost:5258/api/danhgia/SanPham/${productId}`;
    console.log("URL API:", apiUrl);

    const response = await fetch(apiUrl);
    console.log("Tr·∫°ng th√°i response:", response.status, response.statusText);

    if (!response.ok) {
      throw new Error(
        `Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data);

    // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
    if (!data || !data.$values) {
      console.error("C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng ƒë√∫ng:", data);
      throw new Error("C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");
    }

    // L·∫•y m·∫£ng ƒë√°nh gi√° t·ª´ c·∫•u tr√∫c JSON
    const reviews = data.$values || [];
    console.log("S·ªë l∆∞·ª£ng ƒë√°nh gi√°:", reviews.length);

    renderReviews(reviews);
    setupSlider(reviews.length);
  } catch (error) {
    console.error("L·ªói khi t·∫£i ƒë√°nh gi√°:", error);
    document.querySelector(
      "#reviews-slider"
    ).innerHTML = `<div class="reviews-error">Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°: ${error.message}</div>`;
  }
}

function renderReviews(reviews) {
  const sliderElement = document.querySelector("#reviews-slider");

  if (reviews.length === 0) {
    sliderElement.innerHTML =
      '<div class="no-reviews">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o cho s·∫£n ph·∫©m n√†y</div>';
    document.querySelector("#average-stars").textContent = "0";
    document.querySelector("#reviews-count").textContent = "0";
    document.querySelector("#summary-stars").innerHTML = generateStars(0);
    return;
  }

  // T√≠nh ƒëi·ªÉm trung b√¨nh
  const totalStars = reviews.reduce((sum, review) => sum + review.soSao, 0);
  const averageStars = (totalStars / reviews.length).toFixed(1);

  // C·∫≠p nh·∫≠t th√¥ng tin ƒë√°nh gi√° t·ªïng
  document.querySelector("#average-stars").textContent = averageStars;
  document.querySelector("#reviews-count").textContent = reviews.length;
  document.querySelector("#summary-stars").innerHTML =
    generateStars(averageStars);

  // T·∫°o c√°c th·∫ª ƒë√°nh gi√°
  sliderElement.innerHTML = "";
  reviews.forEach((review) => {
    const reviewCard = document.createElement("div");
    reviewCard.className = "review-card";

    // ƒê·ªãnh d·∫°ng ng√†y
    const reviewDate = new Date(review.ngayDanhGia);
    const formattedDate = `${reviewDate.getDate()}/${
      reviewDate.getMonth() + 1
    }/${reviewDate.getFullYear()}`;

    reviewCard.innerHTML = `
      <div class="review-header">
        <div class="review-name">${review.tenKhachHang}</div>
        <div class="review-date">${formattedDate}</div>
      </div>
      <div class="review-stars">${generateStars(review.soSao)}</div>
      <div class="review-comment">${
        review.binhLuan || "Kh√¥ng c√≥ b√¨nh lu·∫≠n"
      }</div>
    `;

    sliderElement.appendChild(reviewCard);
  });
}

function generateStars(rating) {
  const fullStars = Math.floor(rating);
  const halfStar = rating % 1 >= 0.5;
  const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

  let starsHTML = "";

  // Th√™m sao ƒë·∫ßy
  for (let i = 0; i < fullStars; i++) {
    starsHTML += "‚òÖ";
  }

  // Th√™m n·ª≠a sao n·∫øu c√≥
  if (halfStar) {
    starsHTML += "‚úÆ";
  }

  // Th√™m sao tr·ªëng
  for (let i = 0; i < emptyStars; i++) {
    starsHTML += "‚òÜ";
  }

  return starsHTML;
}

function setupSlider(totalReviews) {
  const slider = document.querySelector("#reviews-slider");
  const prevBtn = document.querySelector("#prev-review");
  const nextBtn = document.querySelector("#next-review");

  let currentIndex = 0;
  const reviewCards = document.querySelectorAll(".review-card");
  const visibleItems = getVisibleItems();
  const maxIndex = Math.max(0, reviewCards.length - visibleItems);

  // ·∫®n n√∫t prev khi ·ªü slide ƒë·∫ßu ti√™n
  prevBtn.style.display = "none";

  // ·∫®n c·∫£ hai n√∫t n·∫øu kh√¥ng ƒë·ªß ƒë√°nh gi√° ƒë·ªÉ tr∆∞·ª£t
  if (reviewCards.length <= visibleItems) {
    nextBtn.style.display = "none";
  }

  prevBtn.addEventListener("click", () => {
    if (currentIndex > 0) {
      currentIndex--;
      updateSliderPosition();
    }
  });

  nextBtn.addEventListener("click", () => {
    if (currentIndex < maxIndex) {
      currentIndex++;
      updateSliderPosition();
    }
  });

  function updateSliderPosition() {
    const itemWidth = reviewCards[0].offsetWidth + 20; // Bao g·ªìm c·∫£ gap
    slider.style.transform = `translateX(-${currentIndex * itemWidth}px)`;

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t
    prevBtn.style.display = currentIndex === 0 ? "none" : "flex";
    nextBtn.style.display = currentIndex >= maxIndex ? "none" : "flex";
  }

  // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng ƒë√°nh gi√° hi·ªÉn th·ªã d·ª±a theo k√≠ch th∆∞·ªõc m√†n h√¨nh
  function getVisibleItems() {
    const width = window.innerWidth;
    if (width < 576) return 1;
    if (width < 992) return 2;
    return 3;
  }

  // C·∫≠p nh·∫≠t l·∫°i khi thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh
  window.addEventListener("resize", () => {
    const newVisibleItems = getVisibleItems();
    const newMaxIndex = Math.max(0, reviewCards.length - newVisibleItems);

    // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ n·∫øu c·∫ßn
    if (currentIndex > newMaxIndex) {
      currentIndex = newMaxIndex;
    }

    updateSliderPosition();
  });
}

// Th√™m c√†i ƒë·∫∑t tr·ª±c ti·∫øp MaSanPham n·∫øu c·∫ßn test
function setTestProductId(productId) {
  console.log("ƒêang c√†i ƒë·∫∑t m√£ s·∫£n ph·∫©m test:", productId);
  fetchReviews(productId);
}
