// ============ 2. ACCOUNT MANAGEMENT SECTION ============

// 2.1 Qu·∫£n l√Ω t√†i kho·∫£n c√° nh√¢n
const api = {
  // ‚úÖ 1. L·∫§Y TH√îNG TIN T√ÄI KHO·∫¢N
  getTaiKhoanQuanLy: async () => {
    try {
      const response = await fetch(
        "http://localhost:5258/api/TaiKhoan/LayTaiKhoanQuanLy",
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("authToken")}`,
            "Content-Type": "application/json",
          },
        }
      );

      if (!response.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n");
      return await response.json();
    } catch (error) {
      hienThiThongBao(error.message, "error");
      return null;
    }
  },

  // ‚úÖ 2. C·∫¨P NH·∫¨T T√ÄI KHO·∫¢N & ƒê·ªîI M·∫¨T KH·∫®U
  updateTaiKhoanQuanLy: async (accountData) => {
    try {
      const formData = new FormData();
      formData.append("TenDangNhap", accountData.TenDangNhap);
      formData.append("MatKhauCu", accountData.MatKhauCu);
      formData.append("MatKhau", accountData.MatKhau);
      formData.append("NhapLaiMatKhau", accountData.NhapLaiMatKhau);

      const response = await fetch(
        "http://localhost:5258/api/TaiKhoan/CapNhatTaiKhoan",
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("authToken")}`,
          },
          body: formData,
        }
      );

      const responseData = await response.json();
      if (!response.ok) {
        throw new Error(responseData.Message || "C·∫≠p nh·∫≠t t√†i kho·∫£n th·∫•t b·∫°i");
      }

      return responseData;
    } catch (error) {
      hienThiThongBao(error.message, "error");
      return null;
    }
  },
};

// ‚úÖ 3. Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n l√™n form
async function hienThiThongTinTaiKhoan() {
  const usernameField = document.getElementById("username");
  if (!usernameField)
    return console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y input username!");

  const accountInfo = await api.getTaiKhoanQuanLy();
  if (accountInfo) {
    usernameField.value = accountInfo.tenDangNhap || "";
  }
}

// ‚úÖ 4. C·∫≠p nh·∫≠t t√†i kho·∫£n & ƒë·ªïi m·∫≠t kh·∫©u
async function capNhatTaiKhoanQuanLy(event) {
  event.preventDefault(); // NgƒÉn form load l·∫°i trang

  const username = document.getElementById("username")?.value;
  const currentPassword = document.getElementById("current-password")?.value;
  const newPassword = document.getElementById("new-password")?.value;
  const confirmPassword = document.getElementById("confirm-password")?.value;

  if (!username || !currentPassword || !newPassword || !confirmPassword) {
    hienThiThongBao("‚ö† Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", "error");
    return;
  }

  if (newPassword !== confirmPassword) {
    hienThiThongBao("‚ö† M·∫≠t kh·∫©u m·ªõi nh·∫≠p l·∫°i kh√¥ng kh·ªõp!", "error");
    return;
  }

  // ‚úÖ Hi·ªÉn th·ªã tr·∫°ng th√°i x·ª≠ l√Ω
  const submitBtn = document.querySelector(".submit-btn");
  if (submitBtn) {
    submitBtn.innerHTML = '<span class="spinner"></span> ƒêang x·ª≠ l√Ω...';
    submitBtn.disabled = true;
  }

  // ‚úÖ G·ª≠i d·ªØ li·ªáu l√™n API
  const updatedAccount = {
    TenDangNhap: username,
    MatKhauCu: currentPassword,
    MatKhau: newPassword,
    NhapLaiMatKhau: confirmPassword,
  };

  const result = await api.updateTaiKhoanQuanLy(updatedAccount);

  if (result) {
    hienThiThongBao("‚úÖ C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng!", "success");
    hienThiThongTinTaiKhoan(); // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
  }

  // ‚úÖ Kh√¥i ph·ª•c n√∫t
  if (submitBtn) {
    submitBtn.innerHTML = "ƒê·ªïi m·∫≠t kh·∫©u";
    submitBtn.disabled = false;
  }
}

// ‚úÖ 5. Hi·ªÉn th·ªã th√¥ng b√°o tr√™n giao di·ªán (CSS trong JS)
function hienThiThongBao(message, type = "success") {
  let notificationBox = document.getElementById("notification-box");

  if (!notificationBox) {
    notificationBox = document.createElement("div");
    notificationBox.id = "notification-box";
    document.body.appendChild(notificationBox);

    // Th√™m CSS v√†o trang
    const style = document.createElement("style");
    style.innerHTML = `
        #notification-box {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 1000;
        }
        .notification {
          padding: 10px 20px;
          border-radius: 5px;
          font-weight: bold;
          display: inline-block;
          margin-bottom: 10px;
        }
        .success {
          background-color: #4caf50;
          color: white;
        }
        .error {
          background-color: #f44336;
          color: white;
        }
      `;
    document.head.appendChild(style);
  }

  // Th√™m th√¥ng b√°o m·ªõi
  const notification = document.createElement("div");
  notification.className = `notification ${type}`;
  notification.textContent = message;

  notificationBox.appendChild(notification);

  // ·∫®n th√¥ng b√°o sau 3 gi√¢y
  setTimeout(() => {
    notification.remove();
  }, 3000);
}

// ‚úÖ 6. G·ªçi API khi trang t·∫£i
document.addEventListener("DOMContentLoaded", () => {
  hienThiThongTinTaiKhoan();
  const form = document.getElementById("personal-account-form");
  if (form) {
    form.addEventListener("submit", capNhatTaiKhoanQuanLy);
  } else {
    console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y form #personal-account-form!");
  }
});

// 2.2 Qu·∫£n l√Ω t√†i kho·∫£n nh√¢n vi√™n
// üü¢ 1. Load danh s√°ch t√†i kho·∫£n nh√¢n vi√™n
function loadStaffAccounts() {
  const loader = document.getElementById("staff-accounts-loader");
  if (loader) loader.classList.remove("hidden");

  fetch("http://localhost:5258/api/TaiKhoan/LayDanhSachTaiKhoanNhanVien", {
    method: "GET",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("authToken")}`,
      "Content-Type": "application/json",
    },
  })
    .then((response) => {
      if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n");
      return response.json();
    })
    .then((data) => {
      if (!data || !data.$values)
        throw new Error("D·ªØ li·ªáu API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");

      staffAccounts = data.$values;
      renderStaffAccountsTable();
    })
    .catch((error) => {
      console.error("L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n:", error);
      showNotification("error", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n.");
    })
    .finally(() => {
      if (loader) loader.classList.add("hidden");
    });
}

// üü¢ 2. Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n nh√¢n vi√™n l√™n b·∫£ng
function renderStaffAccountsTable() {
  const tableBody = document.querySelector("#staff-account-table tbody");
  if (!tableBody) {
    console.error("Kh√¥ng t√¨m th·∫•y b·∫£ng danh s√°ch t√†i kho·∫£n");
    return;
  }

  tableBody.innerHTML = "";

  staffAccounts.forEach((account, index) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${index + 1}</td>
      <td>${account.tenNhanVien || "Ch∆∞a c√≥ t√™n"}</td>
      <td>${account.tenDangNhap}</td>
      <td>********</td>
      <td>
        <span class="status-badge ${
          account.trangThaiTaiKhoan === "Ho·∫°t ƒë·ªông" ? "active" : "inactive"
        }">
          ${account.trangThaiTaiKhoan}
        </span>
      </td>
      <td>
        <button class="action-btn toggle-status" data-id="${
          account.maTaiKhoan
        }">
          ${
            account.trangThaiTaiKhoan === "Ho·∫°t ƒë·ªông"
              ? "D·ª´ng ho·∫°t ƒë·ªông"
              : "K√≠ch ho·∫°t"
          }
        </button>
      </td>
    `;
    tableBody.appendChild(tr);
  });

  // üü¢ G√°n s·ª± ki·ªán click cho n√∫t thay ƒë·ªïi tr·∫°ng th√°i
  document.querySelectorAll(".toggle-status").forEach((button) => {
    button.addEventListener("click", function () {
      const accountId = this.getAttribute("data-id");
      toggleStaffAccountStatus(accountId);
    });
  });
}

// üü¢ 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n nh√¢n vi√™n
function toggleStaffAccountStatus(accountId) {
  const account = staffAccounts.find((acc) => acc.maTaiKhoan === accountId);
  if (!account) return;

  const newStatus =
    account.trangThaiTaiKhoan === "Ho·∫°t ƒë·ªông" ? "Kh√¥ng Ho·∫°t ƒë·ªông" : "Ho·∫°t ƒë·ªông";

  if (
    !confirm(
      `B·∫°n c√≥ ch·∫Øc mu·ªën ${
        newStatus === "Ho·∫°t ƒë·ªông" ? "k√≠ch ho·∫°t" : "d·ª´ng"
      } t√†i kho·∫£n n√†y?`
    )
  ) {
    return;
  }

  fetch(
    `http://localhost:5258/api/TaiKhoan/capnhattrangthainhanvien/${account.maNhanVien}`,
    {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${localStorage.getItem("authToken")}`,
        "Content-Type": "application/json",
      },
    }
  )
    .then((response) => {
      if (!response.ok)
        throw new Error("Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n");
      return response.json();
    })
    .then((data) => {
      showNotification("success", "Thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n th√†nh c√¥ng");
      account.trangThaiTaiKhoan = data.trangThaiTaiKhoan; // C·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi
      renderStaffAccountsTable();
    })
    .catch((error) => {
      console.error("L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n:", error);
      showNotification("error", "Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i.");
    });
}

// üü¢ 4. G·ªçi h√†m khi trang t·∫£i
document.addEventListener("DOMContentLoaded", () => {
  loadStaffAccounts();
});

// üü¢ 5. H√†m hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(type, message) {
  const notification = document.createElement("div");
  notification.className = `notification ${type}`;
  notification.textContent = message;
  document.body.appendChild(notification);

  setTimeout(() => {
    notification.remove();
  }, 3000);
}

// üü¢ 6. Ch√®n CSS v√†o trang t·ª´ JavaScript
const styles = `
  .status-badge {
    padding: 5px 10px;
    border-radius: 5px;
    font-weight: bold;
    display: inline-block;
  }
  
  .status-badge.active {
    background-color: #28a745;
    color: white;
  }

  .status-badge.inactive {
    background-color: #dc3545;
    color: white;
  }

  .action-btn {
    padding: 5px 10px;
    border: none;
    cursor: pointer;
    font-weight: bold;
    border-radius: 4px;
    transition: background-color 0.3s;
  }

  .action-btn:hover {
    background-color: #007bff;
    color: white;
  }

  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 10px 15px;
    border-radius: 5px;
    font-weight: bold;
    z-index: 1000;
    transition: all 0.3s ease-in-out;
  }

  .notification.success {
    background-color: #28a745;
    color: white;
  }

  .notification.error {
    background-color: #dc3545;
    color: white;
  }

  .hidden {
    display: none;
  }
    /* üü¢ CSS cho Modal */
.modal {
  display: none; /* ·∫®n m·∫∑c ƒë·ªãnh */
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5); /* M·ªù n·ªÅn */
  justify-content: center;
  align-items: center;
}

/* üü¢ N·ªôi dung Modal */
.modal-content {
  background: #fff;
  padding: 20px;
  width: 400px;
  border-radius: 10px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  position: relative;
  animation: fadeIn 0.3s ease-in-out;
}

/* üü¢ Ti√™u ƒë·ªÅ */
.modal-content h2 {
  text-align: center;
  margin-bottom: 15px;
  font-size: 22px;
  color: #333;
}

/* üü¢ Input Form */
.modal-content input,
.modal-content textarea {
  width: 100%;
  padding: 10px;
  margin: 5px 0;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
}

/* üü¢ N√∫t Th√™m nh√¢n vi√™n */
#add-staff-btn {
  width: 100%;
  background: #28a745;
  color: white;
  padding: 10px;
  font-size: 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: 0.3s;
}

#add-staff-btn:hover {
  background: #218838;
}

/* üü¢ N√∫t H·ªßy */
.close-modal {
  width: 100%;
  background: #dc3545;
  color: white;
  padding: 10px;
  font-size: 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-top: 5px;
  transition: 0.3s;
}

.close-modal:hover {
  background: #c82333;
}

/* üü¢ Hi·ªáu ·ª©ng Fade In */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

`;

// üü¢ 7. Th√™m CSS v√†o <head>
const styleSheet = document.createElement("style");
styleSheet.type = "text/css";
styleSheet.innerText = styles;
document.head.appendChild(styleSheet);

/* üü¢ 3. Th√™m t√†i kho·∫£n nh√¢n vi√™n */
document.addEventListener("DOMContentLoaded", function () {
  /* üü¢ Hi·ªÉn th·ªã modal th√™m t√†i kho·∫£n nh√¢n vi√™n */
  function showAddStaffModal() {
    console.log("üîÑ G·ªçi showAddStaffModal...");

    let modal = document.getElementById("add-staff-modal");

    if (!modal) {
      console.log("‚ö†Ô∏è Modal ch∆∞a t·ªìn t·∫°i, ƒëang t·∫°o m·ªõi...");
      modal = document.createElement("div");
      modal.id = "add-staff-modal";
      modal.classList.add("modal");
      modal.innerHTML = `
        <div class="modal-content">
          <h2>Th√™m nh√¢n vi√™n</h2>
          <form id="add-staff-form">
            <input type="text" id="staff-fullname" placeholder="H·ªç v√† T√™n" required>
            <input type="text" id="staff-username" placeholder="T√™n ƒëƒÉng nh·∫≠p" required>
            <input type="password" id="staff-password" placeholder="M·∫≠t kh·∫©u" required>
            <input type="password" id="staff-confirm-password" placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u" required>
            <textarea id="staff-address" placeholder="ƒê·ªãa ch·ªâ" required></textarea>
            <input type="email" id="staff-email" placeholder="Email" required>
            <input type="text" id="staff-phone" placeholder="S·ªë ƒëi·ªán tho·∫°i" required>
            <button type="submit" id="add-staff-btn">Th√™m nh√¢n vi√™n</button>
            <button type="button" class="close-modal">H·ªßy</button>
          </form>
        </div>
      `;
      document.body.appendChild(modal);

      // ƒê√≥ng modal khi b·∫•m "H·ªßy"
      modal.querySelector(".close-modal").addEventListener("click", () => {
        console.log("‚ùå ƒê√≥ng modal");
        modal.style.display = "none";
      });

      // G√°n s·ª± ki·ªán submit form (ch·ªâ g√°n m·ªôt l·∫ßn)
      modal
        .querySelector("#add-staff-form")
        .addEventListener("submit", addStaffAccount);
    }

    console.log("‚úÖ Hi·ªÉn th·ªã modal");
    modal.style.display = "block";
  }

  /* üü¢ Th√™m t√†i kho·∫£n nh√¢n vi√™n */
  function addStaffAccount(event) {
    event.preventDefault();
    console.log("üìå B·∫Øt ƒë·∫ßu th√™m t√†i kho·∫£n...");

    let modal = document.getElementById("add-staff-modal");
    if (!modal) {
      console.error("‚ùå Modal ch∆∞a t·ªìn t·∫°i trong DOM");
      return;
    }

    const fullName = modal.querySelector("#staff-fullname")?.value.trim() || "";
    const username = modal.querySelector("#staff-username")?.value.trim() || "";
    const password = modal.querySelector("#staff-password")?.value || "";
    const confirmPassword =
      modal.querySelector("#staff-confirm-password")?.value || "";
    const address = modal.querySelector("#staff-address")?.value.trim() || "";
    const email = modal.querySelector("#staff-email")?.value.trim() || "";
    const phoneNumber = modal.querySelector("#staff-phone")?.value.trim() || "";

    console.log("üìå D·ªØ li·ªáu nh·∫≠p v√†o:", {
      fullName,
      username,
      password,
      confirmPassword,
      address,
      email,
      phoneNumber,
    });

    if (
      !fullName ||
      !username ||
      !password ||
      !confirmPassword ||
      !address ||
      !email ||
      !phoneNumber
    ) {
      showNotification("error", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }

    if (password !== confirmPassword) {
      showNotification("error", "M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp");
      return;
    }

    // Disable n√∫t & hi·ªÉn th·ªã loading
    const addStaffBtn = document.getElementById("add-staff-btn");
    addStaffBtn.innerHTML = '<span class="spinner"></span> ƒêang x·ª≠ l√Ω...';
    addStaffBtn.disabled = true;

    // T·∫°o FormData thay v√¨ JSON
    const formData = new FormData();
    formData.append("HoTen", fullName);
    formData.append("TenDangNhap", username);
    formData.append("MatKhau", password);
    formData.append("NhapLaiMatKhau", confirmPassword);
    formData.append("DiaChi", address);
    formData.append("Email", email);
    formData.append("SoDienThoai", phoneNumber);

    console.log("üì§ D·ªØ li·ªáu g·ª≠i l√™n API:", formData);

    // G·ª≠i API
    fetch("http://localhost:5258/api/TaiKhoan/ThemTaiKhoanNhanVien", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${localStorage.getItem("authToken")}`, // Kh√¥ng d√πng "Content-Type" v√¨ FormData t·ª± ƒë·ªông set
      },
      body: formData,
    })
      .then(async (response) => {
        const responseData = await response.json();
        console.log("üì• Ph·∫£n h·ªìi t·ª´ API:", responseData);

        if (!response.ok) {
          throw new Error(
            responseData.message ||
              "Kh√¥ng th·ªÉ th√™m t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i."
          );
        }

        return responseData;
      })
      .then(() => {
        showNotification("success", "Th√™m t√†i kho·∫£n nh√¢n vi√™n th√†nh c√¥ng");

        // ƒê√≥ng modal & reset form
        document.getElementById("add-staff-modal").style.display = "none";
        document.getElementById("add-staff-form").reset();

        // C·∫≠p nh·∫≠t danh s√°ch nh√¢n vi√™n
        loadStaffAccounts();
      })
      .catch((error) => {
        console.error("‚ùå L·ªói khi th√™m t√†i kho·∫£n nh√¢n vi√™n:", error);
        showNotification("error", error.message);
      })
      .finally(() => {
        // Kh√¥i ph·ª•c n√∫t sau khi ho√†n t·∫•t
        addStaffBtn.innerHTML = "Th√™m nh√¢n vi√™n";
        addStaffBtn.disabled = false;
      });
  }

  /* üü¢ H√†m hi·ªÉn th·ªã th√¥ng b√°o */
  function showNotification(type, message) {
    alert(`[${type.toUpperCase()}] ${message}`);
  }

  /* üü¢ G·ªçi modal khi nh·∫•n n√∫t th√™m nh√¢n vi√™n */
  const addButton = document.getElementById("open-add-staff-modal");
  if (addButton) {
    addButton.addEventListener("click", () => {
      console.log("‚úÖ N√∫t Th√™m Nh√¢n Vi√™n ƒë√£ ƒë∆∞·ª£c nh·∫•n");
      showAddStaffModal();
    });
  } else {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t 'open-add-staff-modal'");
  }
});

//////////////////////////////////////////////////////////////////////////////////////////////////
document.addEventListener("DOMContentLoaded", () => {
  loadCustomerAccounts();
});

// üü¢ 1. T·∫£i danh s√°ch t√†i kho·∫£n kh√°ch h√†ng t·ª´ API
function loadCustomerAccounts() {
  const loader = document.getElementById("customer-accounts-loader");
  if (loader) loader.classList.remove("hidden");

  fetch(`http://localhost:5258/api/TaiKhoan/LayDanhSachTaiKhoanKhachHang`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("authToken")}`,
      "Content-Type": "application/json",
    },
  })
    .then((response) => {
      if (!response.ok)
        throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch t√†i kho·∫£n kh√°ch h√†ng");
      return response.json();
    })
    .then((data) => {
      if (!data || !data.$values)
        throw new Error("D·ªØ li·ªáu API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");

      customerAccounts = data.$values;
      renderCustomerAccountsTable();
    })
    .catch((error) => {
      console.error("L·ªói khi t·∫£i danh s√°ch kh√°ch h√†ng:", error);
      showNotification(
        "error",
        "Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√°ch h√†ng. Vui l√≤ng th·ª≠ l·∫°i."
      );
    })
    .finally(() => {
      if (loader) loader.classList.add("hidden");
    });
}

// üü¢ 2. Hi·ªÉn th·ªã danh s√°ch kh√°ch h√†ng l√™n b·∫£ng
function renderCustomerAccountsTable() {
  const tableBody = document.querySelector("#customer-account-table tbody");
  if (!tableBody) {
    console.error("Kh√¥ng t√¨m th·∫•y b·∫£ng danh s√°ch t√†i kho·∫£n kh√°ch h√†ng");
    return;
  }

  tableBody.innerHTML = "";

  customerAccounts.forEach((account, index) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${index + 1}</td>
      <td>${account.tenKhachHang || "Ch∆∞a c√≥ t√™n"}</td>
      <td>${account.tenDangNhap}</td>
      <td>********</td>
      <td>
        <span class="status-badge ${
          account.trangThaiTaiKhoan === "Ho·∫°t ƒë·ªông" ? "active" : "inactive"
        }">
          ${account.trangThaiTaiKhoan}
        </span>
      </td>
      <td>
        <button class="action-btn toggle-status" data-id="${
          account.maTaiKhoan
        }">
          ${
            account.trangThaiTaiKhoan === "Ho·∫°t ƒë·ªông"
              ? "D·ª´ng ho·∫°t ƒë·ªông"
              : "K√≠ch ho·∫°t"
          }
        </button>
      </td>
    `;
    tableBody.appendChild(tr);
  });

  // üü¢ G√°n s·ª± ki·ªán thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n
  document.querySelectorAll(".toggle-status").forEach((button) => {
    button.addEventListener("click", function () {
      const accountId = this.getAttribute("data-id");
      toggleCustomerAccountStatus(accountId);
    });
  });
}

// üü¢ 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n kh√°ch h√†ng
function toggleCustomerAccountStatus(accountId) {
  const account = customerAccounts.find((acc) => acc.maTaiKhoan === accountId);
  if (!account) return;

  const newStatus =
    account.trangThaiTaiKhoan === "Ho·∫°t ƒë·ªông" ? "Kh√¥ng Ho·∫°t ƒë·ªông" : "Ho·∫°t ƒë·ªông";

  if (
    !confirm(
      `B·∫°n c√≥ ch·∫Øc mu·ªën ${
        newStatus === "Ho·∫°t ƒë·ªông" ? "k√≠ch ho·∫°t" : "d·ª´ng"
      } t√†i kho·∫£n n√†y?`
    )
  ) {
    return;
  }

  fetch(
    `http://localhost:5258/api/TaiKhoan/capnhattrangthaikhachhang/${account.maKhachHang}`,
    {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${localStorage.getItem("authToken")}`,
        "Content-Type": "application/json",
      },
    }
  )
    .then((response) => {
      if (!response.ok) {
        return response.text().then((text) => {
          throw new Error(`L·ªói API: ${text}`);
        });
      }
      return response.json();
    })
    .then((data) => {
      showNotification("success", "Thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n th√†nh c√¥ng");
      account.trangThaiTaiKhoan = data.trangThaiTaiKhoan;
      renderCustomerAccountsTable();
    })
    .catch((error) => {
      console.error("L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n:", error);
      showNotification("error", error.message);
    });
}

// üü¢ 4. G·ªçi h√†m khi trang t·∫£i
document.addEventListener("DOMContentLoaded", () => {
  loadCustomerAccounts();
});

// üü¢ 5. H√†m hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(type, message) {
  const notification = document.createElement("div");
  notification.className = `notification ${type}`;
  notification.textContent = message;
  document.body.appendChild(notification);

  setTimeout(() => {
    notification.remove();
  }, 3000);
}
